/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as EmployeesImport } from './routes/employees'
import { Route as CafesIndexImport } from './routes/cafes/index'
import { Route as CafesEditImport } from './routes/cafes/edit'
import { Route as CafesCreateImport } from './routes/cafes/create'

// Create/Update Routes

const EmployeesRoute = EmployeesImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => rootRoute,
} as any)

const CafesIndexRoute = CafesIndexImport.update({
  id: '/cafes/',
  path: '/cafes/',
  getParentRoute: () => rootRoute,
} as any)

const CafesEditRoute = CafesEditImport.update({
  id: '/cafes/edit',
  path: '/cafes/edit',
  getParentRoute: () => rootRoute,
} as any)

const CafesCreateRoute = CafesCreateImport.update({
  id: '/cafes/create',
  path: '/cafes/create',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/employees': {
      id: '/employees'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesImport
      parentRoute: typeof rootRoute
    }
    '/cafes/create': {
      id: '/cafes/create'
      path: '/cafes/create'
      fullPath: '/cafes/create'
      preLoaderRoute: typeof CafesCreateImport
      parentRoute: typeof rootRoute
    }
    '/cafes/edit': {
      id: '/cafes/edit'
      path: '/cafes/edit'
      fullPath: '/cafes/edit'
      preLoaderRoute: typeof CafesEditImport
      parentRoute: typeof rootRoute
    }
    '/cafes/': {
      id: '/cafes/'
      path: '/cafes'
      fullPath: '/cafes'
      preLoaderRoute: typeof CafesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/employees': typeof EmployeesRoute
  '/cafes/create': typeof CafesCreateRoute
  '/cafes/edit': typeof CafesEditRoute
  '/cafes': typeof CafesIndexRoute
}

export interface FileRoutesByTo {
  '/employees': typeof EmployeesRoute
  '/cafes/create': typeof CafesCreateRoute
  '/cafes/edit': typeof CafesEditRoute
  '/cafes': typeof CafesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/employees': typeof EmployeesRoute
  '/cafes/create': typeof CafesCreateRoute
  '/cafes/edit': typeof CafesEditRoute
  '/cafes/': typeof CafesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/employees' | '/cafes/create' | '/cafes/edit' | '/cafes'
  fileRoutesByTo: FileRoutesByTo
  to: '/employees' | '/cafes/create' | '/cafes/edit' | '/cafes'
  id: '__root__' | '/employees' | '/cafes/create' | '/cafes/edit' | '/cafes/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  EmployeesRoute: typeof EmployeesRoute
  CafesCreateRoute: typeof CafesCreateRoute
  CafesEditRoute: typeof CafesEditRoute
  CafesIndexRoute: typeof CafesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  EmployeesRoute: EmployeesRoute,
  CafesCreateRoute: CafesCreateRoute,
  CafesEditRoute: CafesEditRoute,
  CafesIndexRoute: CafesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/employees",
        "/cafes/create",
        "/cafes/edit",
        "/cafes/"
      ]
    },
    "/employees": {
      "filePath": "employees.tsx"
    },
    "/cafes/create": {
      "filePath": "cafes/create.tsx"
    },
    "/cafes/edit": {
      "filePath": "cafes/edit.tsx"
    },
    "/cafes/": {
      "filePath": "cafes/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
